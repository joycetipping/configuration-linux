#!/bin/bash
# Marginally extensible, not very portable Bash prompt | Spencer Tipping
# Licensed under the terms of the MIT source code license

function meter {
  local color1=$1
  local color2=$2
  local value1=$3
  local value2=$4

  local total=$((value1 + value2))

  if ((total > 0)); then
    local scaled_v1=$((value1 * 10 / total))
    local scaled_v2=$((10 - scaled_v1))     # To prevent rounding error

    if ((scaled_v2 == 0 && value2 > 0)); then
      # Indicate the presence of some value2
      ((++scaled_v2))
      ((--scaled_v1))
    fi

    local v1=$(head -c$scaled_v1 <<< '..........')
    local v2=$(head -c$scaled_v2 <<< '..........')
    echo "\[\033[1;${color1}m\]$v1\[\033[1;${color2}m\]$v2\[\033[0;0m\]"
  fi
}

function set_ps1 {
  local exit_code=$?

  # Define the prompts
  local left='\[\033[1;32m\]\h\[\033[1;34m\]\W\[\033[0;0m\] '
  local info=''

  local git_branch="$(git branch 2>&1 | grep '^\*' | sed 's/^\* //')"
  [[ -z "$git_branch" ]] || git_branch="<$git_branch>"

  info="\[\033[1;30m\]$(date +%Y%m%d%H%M)$git_branch\[\033[0;0m\]"
  info="$(meter 32 31 5 10) $info"

  # Saving and loading the cursor position
  local save='\[\033[s\]'
  local load='\[\033[u\]'
  local info_minus_escapes="$(sed 's/\\\[[^]]*\\\]*//g' <<< "$info")"
  local info_minus_escape_brackets="$(sed 's/\\[][]//g' <<< "$info")"
  local width=${#info_minus_escapes}
  local position=$((COLUMNS - width + 1))

  export PS1="$left$save\[\033[${position}G\]\[$info_minus_escape_brackets\]$load\[\033[0;0m\]"
}

export PROMPT_COMMAND=set_ps1
